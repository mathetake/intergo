package om

import (
	"math/rand"
	"sync"
	"time"

	"github.com/mathetake/intergo"
	"github.com/pkg/errors"
	"math"
)

type OptimizedMultiLeaving struct {
	NumSampling int
}

var _ intergo.Interleaving = &OptimizedMultiLeaving{}

func init() {
	rand.Seed(time.Now().UnixNano())
}

// GetInterleavedRanking ... get a Interleaved ranking sampled from a set of interleaved rankings
// generated by `prefixConstraintSampling` method.
// Note that the way of the sampling is different from the original paper [Schuth, Anne, et al.,2014]
// where they solved LP with the unbiased constraint.
// We omit the unbiased constraint and only take `sensitivity` into account. Then we sample a ranking
// according to calculated sensitivities defined by equation (1) in [Manabe, Tomohiro, et al., 2017]
func (o *OptimizedMultiLeaving) GetInterleavedRanking(num int, rks ...intergo.Ranking) ([]intergo.Res, error) {

	if num < 1 {
		return nil, errors.Errorf("invalid NumSampling: %d", o.NumSampling)
	}

	var wg sync.WaitGroup
	cRks := make([][]intergo.Res, o.NumSampling)
	for i := 0; i < o.NumSampling; i++ {
		wg.Add(1)
		go func(i int) {
			cRks[i] = o.prefixConstraintSampling(num, rks...)
			wg.Done()
		}(i)
	}
	wg.Wait()

	// calc Insensitivity of sampled rankings
	ins := o.calcInsensitivity(rks, cRks)

	// init +inf value
	min := math.Inf(0)
	var maxIDx int
	for i, v := range ins {
		if v < min {
			maxIDx, min = i, v
		}
	}
	return cRks[maxIDx], nil
}

func (*OptimizedMultiLeaving) calcInsensitivity(rks []intergo.Ranking, cRks [][]intergo.Res) []float64 {
	res := make([]float64, len(cRks))

	var iRkNum = len(rks)
	var wg sync.WaitGroup

	for k := 0; k < len(cRks); k++ {
		wg.Add(1)
		go func(k int) {
			var mean float64

			jToScoreMap := make([]float64, iRkNum)
			for j := 0; j < iRkNum; j++ {

				for i := 0; i < len(cRks[0]); i++ {
					var s = i + 1
					if cRks[k][i].RankingIDx == j {
						s *= s
					} else {
						s *= rks[j].Len() + 1
					}
					ss := 1 / float64(s)
					jToScoreMap[j] += ss
					mean += ss
				}
			}

			mean /= float64(iRkNum)

			var score float64
			for j := 0; j < iRkNum; j++ {
				var s = jToScoreMap[j] - mean
				score += s * s
			}
			res[k] = score
			wg.Done()
		}(k)
	}
	wg.Wait()
	return res
}

func (*OptimizedMultiLeaving) prefixConstraintSampling(num int, rks ...intergo.Ranking) []intergo.Res {
	var numR = len(rks)
	res := make([]intergo.Res, 0, num)

	// sIDs stores item's ID in order to prevent duplication in the generated list.
	sIDs := map[interface{}]interface{}{}

	// The fact that the index stored in usedUpRks means it is already used up.
	usedUpRks := map[int]bool{}

	for len(res) < num && len(usedUpRks) != numR {

		// chose randomly one ranking from the ones used up yet
		var selectedRkIdx = rand.Intn(numR)
		if _, ok := usedUpRks[selectedRkIdx]; ok {
			continue
		}

		var rk = rks[selectedRkIdx]
		var bef = len(res)
		for j := 0; j < rk.Len(); j++ {
			if _, ok := sIDs[rk.GetIDByIndex(j)]; !ok {
				res = append(res, intergo.Res{
					RankingIDx: selectedRkIdx,
					ItemIDx:    j,
				})
				sIDs[rk.GetIDByIndex(j)] = true
				break
			}
		}

		if len(res) == bef {
			usedUpRks[selectedRkIdx] = true
		}
	}
	return res
}
